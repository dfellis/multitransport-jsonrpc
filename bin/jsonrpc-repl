#!/usr/bin/env node

const repl = require('repl')
const commander = require('commander')
const jsonrpc = require('../lib/index')
const Client = jsonrpc.client
const TcpTransport = jsonrpc.transports.client.tcp
const HttpTransport = jsonrpc.transports.client.http

commander
  .option('-s, --server <hostname>', 'The hostname the server is located on. (Default: "localhost")', 'localhost')
  .option('-p, --port <portnumber>', 'The port the server is bound to. (Default: 80)', 80)
  .option('-t, --tcp', 'Connects to the server via TCP instead of HTTP (Default: false)', false)
  .option('--path <path>', 'The path part of the URL, e.g. "/rpc" (Default: "/")', '/')
  .parse(process.argv)

const Transport = commander.tcp ? TcpTransport : HttpTransport

new Client(new Transport(commander.server, commander.port, { path: commander.path }), {}, function(client) {
  /* eslint-disable no-console */
  console.log('Connected to ' + commander.server + ':' + commander.port + commander.path + ' over ' + (commander.tcp ? 'TCP' : 'HTTP'))
  console.log('The server reported the following methods:')
  console.log(Object.getOwnPropertyNames(client).filter(name => name !== 'transport').join(', '))
  console.log('Access them with `rpc.foo(arg1, arg2, callbackFunction)`')
  /* eslint-enable no-console */
  const r = repl.start({ prompt: 'jsonrpc> ', useGlobal: true })
  r.context.rpc = client
  r.on('exit', process.exit.bind(process))
})
